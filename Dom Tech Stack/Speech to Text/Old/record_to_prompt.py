# -*- coding: utf-8 -*-
"""Record-to-Prompt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZOsNpNN1hjaogKhYykQeHANIGFIC8Myf

## Dependencies
"""

install pydub SpeechRecognition

"""## Record Audio"""

from IPython.display import display, Javascript

record_audio_js = """
const sleep = time => new Promise(resolve => setTimeout(resolve, time))

const b2text = blob => new Promise(resolve => {
  const reader = new FileReader()
  reader.onloadend = e => resolve(e.srcElement.result)
  reader.readAsDataURL(blob)
})

let recorder, stream, chunks = []

async function startRecording() {
  stream = await navigator.mediaDevices.getUserMedia({ audio: true })
  recorder = new MediaRecorder(stream)
  recorder.ondataavailable = e => chunks.push(e.data)
  recorder.start()
  start_button.disabled = true
  stop_button.disabled = false
}

function stopRecording() {
  return new Promise(async resolve => {
    recorder.onstop = async () => {
      const blob = new Blob(chunks)
      const audio = await b2text(blob)
      resolve(audio)
    }
    recorder.stop()
    stream.getTracks().forEach(track => track.stop())
    start_button.disabled = false
    stop_button.disabled = true
  })
}

var start_button = document.createElement('button');
start_button.textContent = "Start Recording";
start_button.style.display = "block";
start_button.style.margin = "10px 0";
start_button.onclick = startRecording;

var stop_button = document.createElement('button');
stop_button.textContent = "Stop Recording";
stop_button.style.display = "block";
stop_button.style.margin = "10px 0";
stop_button.disabled = true;
stop_button.onclick = async () => {
  const audio = await stopRecording();
  google.colab.kernel.invokeFunction('notebook.upload_audio', [audio], {});
};

document.body.appendChild(start_button);
document.body.appendChild(stop_button);
"""

display(Javascript(record_audio_js))

"""Copy the Transcription!!"""

# Place the Transription in the prompt below
prompt = "testing one two testing one two cheeseburger cheeseburger with french fries all right"

import nltk
from nltk import word_tokenize, pos_tag

import nltk
nltk.download('punkt') # Download the missing 'punkt' resource
nltk.download('averaged_perceptron_tagger') # Download the missing 'averaged_perceptron_tagger' resource
from nltk import word_tokenize, pos_tag

# Tokenize the prompt into words
tokens = word_tokenize(prompt)

# Perform part-of-speech tagging
tagged_tokens = pos_tag(tokens)

# Initialize a list to store capitalized words
capitalized_words = []

# Iterate through tagged tokens
for token, tag in tagged_tokens:
    if tag.startswith('NN') or tag.startswith('VB'):  # NN for nouns, VB for verbs
        capitalized_words.append(token.capitalize())
    else:
        capitalized_words.append(token)

# Join the words back into a single string
capitalized_prompt = ' '.join(capitalized_words)

print("Original Prompt:")
print(prompt)
print("\nCapitalized Prompt:")
print(capitalized_prompt)